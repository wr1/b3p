{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>b3p is a preprocessor for wind turbine blade models. </p> <pre><code>graph TD\n    A[Blade input file] --&gt; B[b3p build]\n    B --&gt; FEA[3D FEA]\n    B --&gt; 2D[Section meshes]\n    B --&gt; BEM </code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Thank you for your interest in contributing to B3P! This document provides guidelines and instructions for contributing.</p>"},{"location":"contributing/#development-setup","title":"Development Setup","text":"<ol> <li>Fork the repository on GitHub</li> <li>Clone your fork locally:    <pre><code>git clone https://github.com/yourusername/b3p.git\ncd b3p\n</code></pre></li> <li>Install development dependencies:    <pre><code>pip install -e \".[dev]\"\n</code></pre></li> </ol>"},{"location":"contributing/#code-style","title":"Code Style","text":"<p>We follow PEP 8 and use Black for code formatting:</p> <pre><code>black b3p\n</code></pre>"},{"location":"contributing/#documentation","title":"Documentation","text":"<p>We use NumPy-style docstrings for all functions and classes. For example:</p> <pre><code>def function(param1, param2):\n    \"\"\"\n    Short description of the function.\n\n    Parameters\n    ----------\n    param1 : type\n        Description of param1\n    param2 : type\n        Description of param2\n\n    Returns\n    -------\n    type\n        Description of return value\n    \"\"\"\n    # Function implementation\n</code></pre> <p>To build the documentation locally:</p> <pre><code>mkdocs serve\n</code></pre> <p>Then visit http://localhost:8000 to view the documentation.</p>"},{"location":"contributing/#testing","title":"Testing","text":"<p>We use pytest for testing:</p> <pre><code>pytest\n</code></pre>"},{"location":"contributing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Create a new branch for your feature or bugfix</li> <li>Make your changes</li> <li>Add tests for your changes</li> <li>Update documentation if necessary</li> <li>Run the tests to ensure they pass</li> <li>Submit a pull request</li> </ol>"},{"location":"contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>Please be respectful and inclusive in your interactions with others in the community. </p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#from-pypi","title":"From pypi","text":"<pre><code>pip install b3p\n</code></pre>"},{"location":"installation/#from-source","title":"From source","text":"<pre><code>git clone https://github.com/wr1/b3p.git\ncd b3p\npip install -e .\n</code></pre>"},{"location":"installation/#testing","title":"Testing","text":"<pre><code>pytest . \n</code></pre>"},{"location":"usage/","title":"Usage Guide","text":""},{"location":"usage/#basic-usage","title":"Basic Usage","text":"<p>B3P provides a command-line interface for running analyses:</p> <pre><code>b3p ccblade your_blade.yml\n</code></pre>"},{"location":"usage/#blade-definition","title":"Blade Definition","text":"<p>Blades are defined using YAML files. Here's a basic example:</p> <pre><code>general:\n  prefix: my_blade\n  workdir: ./output\n\naero:\n  bem:\n    rated_power: 10e6  # 10 MW\n    B: 3  # Number of blades\n    rho: 1.225  # Air density\n    polars:\n      0.18: path/to/polar_18.dat\n      0.21: path/to/polar_21.dat\n      0.25: path/to/polar_25.dat\n    max_tipspeed: 95.0\n    uinf: [3, 5, 7, 9, 10, 11, 12, 13, 16, 20]\n</code></pre>"},{"location":"usage/#running-ccblade-analysis","title":"Running CCBlade Analysis","text":"<p>The CCBlade analysis can be run programmatically:</p> <pre><code>from b3p.ccblade_run import ccblade_run\n\n# Run the analysis\nanalysis = ccblade_run(\"your_blade.yml\")\n</code></pre>"},{"location":"usage/#interpreting-results","title":"Interpreting Results","text":"<p>After running the analysis, results are saved to:</p> <ul> <li><code>ccblade_output.csv</code>: Performance data at different wind speeds</li> <li><code>ccblade_output.png</code>: Plot of performance metrics</li> <li><code>polars.png</code>: Plot of interpolated airfoil polars</li> <li><code>bladeloads.png</code>: Plot of blade loads</li> </ul>"},{"location":"usage/#advanced-usage","title":"Advanced Usage","text":""},{"location":"usage/#custom-control-optimization","title":"Custom Control Optimization","text":"<p>You can customize the control optimization process:</p> <pre><code>from b3p.ccblade_run import ccblade_run, controloptimize\n\n# Load the blade\nblade = ccblade_run(\"your_blade.yml\")\n\n# Get the rotor\nrotor = blade._setup_rotor()\n\n# Custom control optimization\ncopt = controloptimize(\n    rotor,\n    max_tipspeed=95.0,\n    rtip=blade.rtip,\n    rating=15e6,  # Custom rating\n    uinf=np.array([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]),\n    workdir=\"./custom_output\"\n)\n\n# Optimize with custom parameters\ncopt.control_opt_below_rated(starting_tsr=8, starting_pitch=2)\noutput = copt.control_opt_above_rated()\n</code></pre>"},{"location":"api/ccblade/","title":"CCBlade Module","text":"<p>This page documents the CCBlade functionality in B3P, which provides aerodynamic analysis for wind turbine blades using the Blade Element Momentum (BEM) theory.</p>"},{"location":"api/ccblade/#ccblade-runner","title":"CCBlade Runner","text":"<p>::: b3p.ccblade_run.ccblade_run     rendering:       show_root_heading: true       show_root_full_path: false       show_source: true</p>"},{"location":"api/ccblade/#control-optimization","title":"Control Optimization","text":"<p>::: b3p.ccblade_run.controloptimize     rendering:       show_root_heading: true       show_root_full_path: false       show_source: true</p>"},{"location":"api/ccblade/#rotor-optimization","title":"Rotor Optimization","text":"<p>::: b3p.ccblade_run.RotorOptimizer     rendering:       show_root_heading: true       show_root_full_path: false       show_source: true</p>"},{"location":"api/ccblade/#utility-functions","title":"Utility Functions","text":""},{"location":"api/ccblade/#polar-processing","title":"Polar Processing","text":"<p>::: b3p.ccblade_run.load_polar     rendering:       show_root_heading: true       show_root_full_path: false</p> <p>::: b3p.ccblade_run.interpolate_polars     rendering:       show_root_heading: true       show_root_full_path: false</p>"},{"location":"api/ccblade/#conversion-functions","title":"Conversion Functions","text":"<p>::: b3p.ccblade_run.tsr2omega     rendering:       show_root_heading: true       show_root_full_path: false</p> <p>::: b3p.ccblade_run.omega2tsr     rendering:       show_root_heading: true       show_root_full_path: false</p>"},{"location":"api/ccblade/#plotting-functions","title":"Plotting Functions","text":"<p>::: b3p.ccblade_run.plot_polars     rendering:       show_root_heading: true       show_root_full_path: false</p> <p>::: b3p.ccblade_run.plot_interpolated_polars     rendering:       show_root_heading: true       show_root_full_path: false</p> <p>::: b3p.ccblade_run.plot_bladeloads     rendering:       show_root_heading: true       show_root_full_path: false</p> <p>::: b3p.ccblade_run.rotorplot     rendering:       show_root_heading: true       show_root_full_path: false</p> <p>::: b3p.ccblade_run.plot_grid     rendering:       show_root_heading: true       show_root_full_path: false</p>"},{"location":"api/ccblade/#helper-functions","title":"Helper Functions","text":"<p>::: b3p.ccblade_run.find_closest_x     rendering:       show_root_heading: true       show_root_full_path: false</p>"},{"location":"use/build/","title":"Blade modeling","text":""},{"location":"use/build/#building-a-blade-model","title":"Building a blade model","text":"<p>A b3p blade model is built using the following command: <pre><code>b3p build blade_test.yml\n</code></pre> This is subdivided into the following steps: <pre><code>Usage: b3p COMMAND\n\n\u256d\u2500 Commands \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 2d         Create 2D meshes for calculation of 6x6 matrices.                 \u2502\n\u2502 build      Build the blade model: geometry, mesh, drape, and mass.           \u2502\n\u2502 ccx        Run Calculix on this model                                        \u2502\n\u2502 clean      Clean the working directory.                                      \u2502\n\u2502 --help,-h  Display this message and exit.                                    \u2502\n\u2502 --version  Display application version.                                      \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre></p>"},{"location":"use/build/#interpolation-of-planform-parameters","title":"Interpolation of planform parameters","text":""},{"location":"use/build/#creation-of-a-2d-blade-model","title":"Creation of a 2D blade model","text":""},{"location":"use/fea/","title":"FEA calculation","text":"<pre><code>b3p ccx blade_test.yml\n</code></pre>"},{"location":"use/fea/#load-application","title":"Load application","text":""},{"location":"use/inputfile/","title":"Input file format","text":"<p>The top level keys in the input file are: <pre><code>general:    # run parameters\nplanform:   # blade planform\naero:       # airfoils and polars\nmesh:       # meshing parameters including shear web position\nmesh2d:     # 2D cross section meshing parameters\nmaterials:  # material database\nlaminates:  # laminate plan\nloads:      # loadcases\n</code></pre></p>"},{"location":"use/inputfile/#general","title":"general","text":"<pre><code>  prefix: test_blade    # prefix for output files\n  workdir: temp_blade   # working directory\n</code></pre>"}]}