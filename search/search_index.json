{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to B3P Documentation","text":"<p>B3P (Blade Preprocessor) is a Python-based tool designed to preprocess wind turbine blade models for structural and aerodynamic analyses. It translates blade input files into formats suitable for solvers such as CalculiX (<code>ccx</code>), ANBA4 (<code>anba</code>), and CCBlade (<code>ccblade</code>). B3P supports the creation of 3D blade geometries, 2D sectional meshes, and finite element analysis (FEA) inputs, enabling comprehensive blade design and analysis workflows.</p>"},{"location":"#overview","title":"Overview","text":"<p>B3P provides a command-line interface (CLI) and Python API to:</p> <ul> <li>Build 3D blade models from YAML input files.</li> <li>Generate 2D cross-sectional meshes for structural analysis.</li> <li>Perform aerodynamic analyses using CCBlade.</li> <li>Prepare and run 3D FEA with CalculiX.</li> <li>Drape composite plies and compute mass properties.</li> </ul> <p>The following diagram illustrates the B3P workflow:</p> <pre><code>graph TD\n    A[Blade Input YAML] --&gt; B[b3p build]\n    B --&gt; C[3D Blade Mesh]\n    C --&gt; D[2D Section Meshes]\n    C --&gt; E[3D FEA with CalculiX]\n    D --&gt; F[ANBA4 Sectional Analysis]\n    A --&gt; G[CCBlade Aerodynamic Analysis]</code></pre>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Modular Design: Supports individual steps (e.g., geometry building, meshing, analysis) or complete workflows.</li> <li>YAML Input: Uses human-readable YAML files to define blade geometry, materials, and loads.</li> <li>Composite Support: Handles complex laminate definitions and ply draping.</li> <li>Parallel Processing: Leverages multiprocessing for efficient mesh conversions and analyses.</li> <li>Visualization: Generates output files compatible with tools like Paraview for result inspection.</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>To begin using B3P, follow these steps:</p> <ol> <li>Install B3P via PyPI or from source.</li> <li>Explore the Usage Guide for CLI and API instructions.</li> <li>Check out the Input File Format to create blade definitions.</li> <li>Run example workflows as described in Examples.</li> </ol>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome! See the Contributing Guide for details on setting up a development environment, coding standards, and submitting pull requests.</p>"},{"location":"#support","title":"Support","text":"<p>For issues, questions, or feature requests, visit the GitHub repository and open an issue.</p>"},{"location":"contributing/","title":"Contributing to B3P","text":"<p>Thank you for your interest in contributing to B3P (Blade Preprocessor)! This guide outlines the process for contributing code, documentation, or other improvements.</p>"},{"location":"contributing/#getting-started","title":"Getting Started","text":""},{"location":"contributing/#1-fork-and-clone-the-repository","title":"1. Fork and Clone the Repository","text":"<ol> <li>Fork the B3P repository on GitHub: https://github.com/wr1/b3p.</li> <li>Clone your fork locally:    <pre><code>git clone https://github.com/yourusername/b3p.git\ncd b3p\n</code></pre></li> </ol>"},{"location":"contributing/#2-set-up-the-development-environment","title":"2. Set Up the Development Environment","text":"<ol> <li>Install B3P in editable mode with development dependencies:    <pre><code>pip install -e \".[dev]\"\n</code></pre></li> <li>(Optional) Set up a Conda environment for ANBA4:    <pre><code>conda create -n anba4-env\nconda activate anba4-env\nbash default_install.sh\n</code></pre></li> </ol>"},{"location":"contributing/#3-create-a-branch","title":"3. Create a Branch","text":"<p>Create a new branch for your feature or bug fix:</p> <pre><code>git checkout -b feature/your-feature-name\n</code></pre>"},{"location":"contributing/#development-guidelines","title":"Development Guidelines","text":""},{"location":"contributing/#code-style","title":"Code Style","text":"<ul> <li>Follow PEP 8 for Python code.</li> <li>Use Black for automatic code formatting:    <pre><code>black b3p\n</code></pre></li> <li>Use NumPy-style docstrings for functions and classes:    <pre><code>def example_function(param1: int, param2: str) -&gt; bool:\n    \"\"\"\n    Short description of the function.\n\n    Parameters\n    ----------\n    param1 : int\n        Description of param1.\n    param2 : str\n        Description of param2.\n\n    Returns\n    -------\n    bool\n        Description of return value.\n    \"\"\"\n    pass\n</code></pre></li> </ul>"},{"location":"contributing/#testing","title":"Testing","text":"<ul> <li>Write tests for new features or bug fixes using pytest.</li> <li>Run the test suite to ensure all tests pass:    <pre><code>pytest\n</code></pre></li> <li>If a test is commented out, assume it\u2019s failing. Fix the underlying issue rather than re-enabling it.</li> </ul>"},{"location":"contributing/#documentation","title":"Documentation","text":"<ul> <li>Update documentation in the <code>docs/</code> folder for new features or changes.</li> <li>Use Markdown for documentation files.</li> <li>Build and preview documentation locally:    <pre><code>mkdocs serve\n</code></pre>    Visit <code>http://localhost:8000</code> to view the documentation.</li> </ul>"},{"location":"contributing/#submitting-changes","title":"Submitting Changes","text":""},{"location":"contributing/#1-commit-changes","title":"1. Commit Changes","text":"<p>Write clear, concise commit messages:</p> <pre><code>git commit -m \"Add feature X to module Y\"\n</code></pre>"},{"location":"contributing/#2-push-to-your-fork","title":"2. Push to Your Fork","text":"<p>Push your branch to your GitHub fork:</p> <pre><code>git push origin feature/your-feature-name\n</code></pre>"},{"location":"contributing/#3-create-a-pull-request","title":"3. Create a Pull Request","text":"<ol> <li>Open a pull request (PR) from your branch to the <code>main</code> branch of the main repository.</li> <li>Include a detailed description of your changes, including:</li> <li>Purpose of the change.</li> <li>Related issues (e.g., <code>Fixes #123</code>).</li> <li>Any testing performed.</li> <li>Ensure all tests pass and documentation is updated.</li> </ol>"},{"location":"contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>Be respectful and inclusive in all interactions. Follow the Contributor Covenant Code of Conduct.</p>"},{"location":"contributing/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Test failures: Check error messages and verify dependency versions.</li> <li>Formatting issues: Run <code>black</code> before committing.</li> <li>Documentation errors: Validate Markdown syntax and test with <code>mkdocs serve</code>.</li> </ul> <p>For questions, reach out via GitHub issues or discussions.</p>"},{"location":"installation/","title":"Installation","text":"<p>This guide covers the installation of B3P (Blade Preprocessor) and its dependencies. B3P is tested on Ubuntu 24.04 and Windows WSL2 (do not use WSL1). A Python environment (version 3.8 or higher) is required.</p>"},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<p>Before installing B3P, ensure the following are installed:</p> <ul> <li>Python 3.8+: Install via your package manager (e.g., <code>apt install python3</code> on Ubuntu) or from python.org.</li> <li>pip: Python package manager, typically included with Python.</li> <li>Git: For cloning the repository (e.g., <code>apt install git</code> on Ubuntu).</li> <li>Conda (optional): For managing dependencies like ANBA4 (install Miniconda or Anaconda from conda.io).</li> <li>CalculiX (optional): Required for 3D FEA (install via <code>apt install calculix-ccx</code> on Ubuntu or follow CalculiX instructions).</li> </ul>"},{"location":"installation/#installation-options","title":"Installation Options","text":"<p>B3P can be installed either from PyPI or from source.</p>"},{"location":"installation/#option-1-install-from-pypi","title":"Option 1: Install from PyPI","text":"<p>The simplest way to install B3P is using pip:</p> <pre><code>pip install b3p\n</code></pre> <p>This installs B3P and its core dependencies (e.g., <code>pyvista</code>, <code>numpy</code>, <code>pandas</code>).</p>"},{"location":"installation/#option-2-install-from-source","title":"Option 2: Install from Source","text":"<p>To install from source (e.g., for development or access to the latest features):</p> <ol> <li> <p>Clone the repository:    <pre><code>git clone https://github.com/wr1/b3p.git\ncd b3p\n</code></pre></p> </li> <li> <p>Install B3P in editable mode:    <pre><code>pip install -e .\n</code></pre></p> </li> <li> <p>(Optional) Install development dependencies:    <pre><code>pip install -e \".[dev]\"\n</code></pre></p> </li> </ol>"},{"location":"installation/#additional-dependencies","title":"Additional Dependencies","text":"<p>For specific analyses, additional tools may be required:</p> <ul> <li>ANBA4: For 2D sectional analysis, install ANBA4 in a Conda environment (e.g., <code>anba4-env</code>). Follow ANBA4's installation instructions or use the <code>default_install.sh</code> script in the B3P repository.</li> <li>CCBlade: For aerodynamic analysis, included with B3P but requires airfoil polar data.</li> </ul> <p>If using the <code>default_install.sh</code> script:</p> <pre><code>cd b3p\nbash default_install.sh\n</code></pre> <p>This script sets up ANBA4, CalculiX, and other dependencies in a Conda environment.</p>"},{"location":"installation/#verification","title":"Verification","text":"<p>Verify the installation by checking the B3P version:</p> <pre><code>b3p --version\n</code></pre> <p>Run the test suite to ensure functionality:</p> <pre><code>pytest\n</code></pre>"},{"location":"installation/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>pip errors: Ensure <code>pip</code> is up-to-date (<code>pip install --upgrade pip</code>).</li> <li>Conda issues: Verify Conda is activated (<code>conda activate anba4-env</code>) and the environment includes ANBA4.</li> <li>CalculiX not found: Confirm <code>ccx</code> is in your PATH (<code>which ccx</code>) or specify the executable path with <code>--ccxexe</code>.</li> <li>Permission errors: Use <code>sudo</code> for system-wide installations or a virtual environment.</li> </ul> <p>For further assistance, check the GitHub issues page.</p>"},{"location":"support/","title":"Support","text":"<p>If you encounter issues, have questions, or want to suggest features for B3P (Blade Preprocessor), this guide outlines how to seek help.</p>"},{"location":"support/#github-repository","title":"GitHub Repository","text":"<p>The primary support channel is the B3P GitHub repository: https://github.com/wr1/b3p.</p>"},{"location":"support/#filing-issues","title":"Filing Issues","text":"<p>For bugs, installation problems, or feature requests: 1. Check existing issues to avoid duplicates. 2. Open a new issue with:    - A clear title (e.g., \"Error in 2D mesh generation\").    - Description of the problem, including error messages and steps to reproduce.    - Environment details (OS, Python version, B3P version, dependencies).    - Relevant logs or screenshots.</p>"},{"location":"support/#discussions","title":"Discussions","text":"<p>Use GitHub Discussions for general questions, ideas, or community feedback: - Ask about usage, best practices, or clarification on documentation. - Share ideas for new features or improvements.</p>"},{"location":"support/#troubleshooting-common-issues","title":"Troubleshooting Common Issues","text":"<ul> <li>Installation failures: Ensure Python 3.8+, <code>pip</code>, and dependencies are up-to-date. Use a virtual environment to avoid conflicts.</li> <li>ANBA4 errors: Verify the <code>anba4-env</code> Conda environment is activated and ANBA4 is installed.</li> <li>CalculiX not found: Confirm <code>ccx</code> is in your PATH or specify with <code>--ccxexe</code>.</li> <li>YAML errors: Check file paths and syntax. Use <code>b3p yml_portable</code> to embed linked files.</li> <li>Memory issues: Reduce radial positions (<code>mesh.radii</code>) or use a machine with more RAM.</li> </ul>"},{"location":"support/#community-and-resources","title":"Community and Resources","text":"<ul> <li>Documentation: Refer to Usage, Input File Format, and Examples for guidance.</li> <li>Examples: The <code>examples</code> folder in the repository includes workflows to learn from.</li> <li>Paraview: Use Paraview to visualize <code>.vtp</code>, <code>.vtu</code>, and <code>.xdmf</code> output files.</li> </ul>"},{"location":"usage/","title":"Usage Guide","text":"<p>This guide explains how to use B3P (Blade Preprocessor) via its command-line interface (CLI) and Python API. B3P processes wind turbine blade models defined in YAML files, enabling geometry creation, meshing, and analyses.</p>"},{"location":"usage/#command-line-interface-cli","title":"Command-Line Interface (CLI)","text":"<p>B3P provides a CLI with commands for building models, running analyses, and cleaning workspaces. The general syntax is:</p> <pre><code>b3p &lt;command&gt; &lt;yaml_file&gt; [options]\n</code></pre>"},{"location":"usage/#key-commands","title":"Key Commands","text":"<ol> <li>Build: Constructs the 3D blade model and meshes.    <pre><code>b3p build blade.yml\n</code></pre>    Subcommands:</li> <li><code>geometry</code>: Build blade geometry only.</li> <li><code>mesh</code>: Generate meshes.</li> <li><code>drape</code>: Drape composite plies.</li> <li><code>mass</code>: Calculate blade mass.</li> <li> <p><code>apply-loads</code>: Apply loads to the mesh.    Example:    <pre><code>b3p build blade.yml --no-bondline\n</code></pre></p> </li> <li> <p>2D Analysis: Generates 2D sectional meshes and runs ANBA4 analysis.    <pre><code>b3p 2d blade.yml\n</code></pre>    Subcommands:</p> </li> <li><code>mesh2d</code>: Create 2D meshes.</li> <li><code>run-anba4</code>: Run ANBA4 analysis.</li> <li><code>clean</code>: Remove temporary <code>msec*</code> files.    Options:</li> <li><code>--rotz &lt;degrees&gt;</code>: Rotate meshes around Z-axis.</li> <li> <p><code>--anba-env &lt;env&gt;</code>: Specify Conda environment for ANBA4.    Example:    <pre><code>b3p 2d blade.yml --rotz 10 --anba-env anba4-env\n</code></pre></p> </li> <li> <p>CCX (CalculiX): Runs 3D finite element analysis.    <pre><code>b3p ccx blade.yml\n</code></pre>    Subcommands:</p> </li> <li><code>prep</code>: Prepare CalculiX input files.</li> <li><code>solve</code>: Solve the FEA problem.</li> <li><code>post</code>: Post-process results.</li> <li><code>plot</code>: Generate 2D/3D plots.    Options:</li> <li><code>--bondline</code>: Include bondline meshes.</li> <li><code>--nproc &lt;n&gt;</code>: Number of processes for solving.</li> <li> <p><code>--wildcard &lt;pattern&gt;</code>: Filter input/result files.    Example:    <pre><code>b3p ccx blade.yml --nproc 4 --bondline\n</code></pre></p> </li> <li> <p>CCBlade: Performs aerodynamic analysis.    <pre><code>b3p ccblade blade.yml\n</code></pre></p> </li> <li> <p>Clean: Removes temporary files from the working directory.    <pre><code>b3p clean blade.yml\n</code></pre></p> </li> </ol>"},{"location":"usage/#example-workflow","title":"Example Workflow","text":"<p>To process a blade model from start to finish:</p> <pre><code>b3p clean blade.yml\nb3p build blade.yml\nb3p 2d blade.yml\nb3p ccx blade.yml\nb3p ccblade blade.yml\n</code></pre>"},{"location":"usage/#python-api","title":"Python API","text":"<p>B3P can be used programmatically for custom workflows. Below is an example of running a CCBlade analysis:</p> <pre><code>from b3p.ccblade_run import ccblade_run\n\n# Run CCBlade analysis\nanalysis = ccblade_run(\"blade.yml\")\n\n# Access results\nprint(analysis.results)\n</code></pre> <p>For advanced control optimization:</p> <pre><code>from b3p.ccblade_run import ccblade_run, controloptimize\n\nblade = ccblade_run(\"blade.yml\")\nrotor = blade._setup_rotor()\ncopt = controloptimize(\n    rotor,\n    max_tipspeed=95.0,\n    rtip=blade.rtip,\n    rating=15e6,\n    uinf=np.array([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]),\n    workdir=\"./custom_output\"\n)\ncopt.control_opt_below_rated(starting_tsr=8, starting_pitch=2)\noutput = copt.control_opt_above_rated()\n</code></pre>"},{"location":"usage/#output-files","title":"Output Files","text":"<p>B3P generates files in the working directory (e.g., <code>output_portable</code>): - Mesh Files: <code>.vtp</code>, <code>.vtu</code> for 3D geometry; <code>.xdmf</code> for 2D meshes. - Drape Files: <code>material_map.json</code>, <code>ply_bom.csv</code>, <code>mass.csv</code> for composite data. - FEA Results: <code>.frd</code>, <code>.vtu</code> for CalculiX outputs. - CCBlade Results: <code>ccblade_output.csv</code>, <code>ccblade_output.png</code>, <code>polars.png</code>.</p> <p>Use visualization tools like Paraview to inspect <code>.vtp</code>, <code>.vtu</code>, and <code>.xdmf</code> files.</p>"},{"location":"usage/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>File not found: Verify YAML file paths and linked files (e.g., airfoils, materials).</li> <li>ANBA4 errors: Ensure the <code>anba4-env</code> Conda environment is activated.</li> <li>CalculiX failures: Check <code>ccx</code> executable path and input file syntax.</li> </ul> <p>Refer to Examples for detailed workflows.</p>"},{"location":"api/ccblade/","title":"CCBlade Module","text":"<p>This page documents the CCBlade functionality in B3P, which provides aerodynamic analysis for wind turbine blades using the Blade Element Momentum (BEM) theory.</p>"},{"location":"api/ccblade/#ccblade-runner","title":"CCBlade Runner","text":"<p>::: b3p.ccblade_run.ccblade_run     rendering:       show_root_heading: true       show_root_full_path: false       show_source: true</p>"},{"location":"api/ccblade/#control-optimization","title":"Control Optimization","text":"<p>::: b3p.ccblade_run.controloptimize     rendering:       show_root_heading: true       show_root_full_path: false       show_source: true</p>"},{"location":"api/ccblade/#rotor-optimization","title":"Rotor Optimization","text":"<p>::: b3p.ccblade_run.RotorOptimizer     rendering:       show_root_heading: true       show_root_full_path: false       show_source: true</p>"},{"location":"api/ccblade/#utility-functions","title":"Utility Functions","text":""},{"location":"api/ccblade/#polar-processing","title":"Polar Processing","text":"<p>::: b3p.ccblade_run.load_polar     rendering:       show_root_heading: true       show_root_full_path: false</p> <p>::: b3p.ccblade_run.interpolate_polars     rendering:       show_root_heading: true       show_root_full_path: false</p>"},{"location":"api/ccblade/#conversion-functions","title":"Conversion Functions","text":"<p>::: b3p.ccblade_run.tsr2omega     rendering:       show_root_heading: true       show_root_full_path: false</p> <p>::: b3p.ccblade_run.omega2tsr     rendering:       show_root_heading: true       show_root_full_path: false</p>"},{"location":"api/ccblade/#plotting-functions","title":"Plotting Functions","text":"<p>::: b3p.ccblade_run.plot_polars     rendering:       show_root_heading: true       show_root_full_path: false</p> <p>::: b3p.ccblade_run.plot_interpolated_polars     rendering:       show_root_heading: true       show_root_full_path: false</p> <p>::: b3p.ccblade_run.plot_bladeloads     rendering:       show_root_heading: true       show_root_full_path: false</p> <p>::: b3p.ccblade_run.rotorplot     rendering:       show_root_heading: true       show_root_full_path: false</p> <p>::: b3p.ccblade_run.plot_grid     rendering:       show_root_heading: true       show_root_full_path: false</p>"},{"location":"api/ccblade/#helper-functions","title":"Helper Functions","text":"<p>::: b3p.ccblade_run.find_closest_x     rendering:       show_root_heading: true       show_root_full_path: false</p>"},{"location":"examples/blade_test/","title":"Running the <code>blade_test.yml</code> Example","text":"<p>This guide explains how to run the <code>blade_test.yml</code> example included in the B3P repository. The example demonstrates a complete workflow for processing a wind turbine blade model, including building the 3D geometry, performing 2D and 3D structural analyses, and generating output files.</p>"},{"location":"examples/blade_test/#prerequisites","title":"Prerequisites","text":"<p>Before running the example, ensure:</p> <ul> <li>B3P is installed (see Installation).</li> <li>Dependencies (CalculiX, ANBA4, Conda environment <code>anba4-env</code>) are set up.</li> <li>The <code>examples</code> folder contains <code>blade_test.yml</code> and linked files (<code>materials.yml</code>, <code>loads.yml</code>, <code>laminates.yml</code>).</li> <li>Sufficient disk space (~500 MB) for output files.</li> </ul>"},{"location":"examples/blade_test/#running-the-example","title":"Running the Example","text":"<p>The <code>blade_test.yml</code> example processes a wind turbine blade model (e.g., SI122) through geometry creation, meshing, 2D sectional analysis, and 3D finite element analysis (FEA). You can run it using the <code>testrun.py</code> script or individual B3P commands.</p>"},{"location":"examples/blade_test/#option-1-using-testrunpy","title":"Option 1: Using <code>testrun.py</code>","text":"<p>The <code>testrun.py</code> script automates the workflow:</p> <pre><code>cd examples\npython testrun.py --example 1\n</code></pre> <p>This executes the sequence of B3P commands for the SI122 blade model.</p>"},{"location":"examples/blade_test/#option-2-manual-execution","title":"Option 2: Manual Execution","text":"<p>To run the workflow manually:</p> <ol> <li> <p>Clean the workspace (optional):    <pre><code>b3p clean blade_test.yml\n</code></pre>    Removes the <code>temp_blade_portable</code> directory.</p> </li> <li> <p>Build the 3D model:    <pre><code>b3p build blade_test.yml\n</code></pre>    Constructs the blade geometry, loads airfoils (e.g., NACA 0017), and generates meshes.</p> </li> <li> <p>Run 2D analysis:    <pre><code>b3p 2d blade_test.yml\n</code></pre>    Generates 2D sectional meshes and runs ANBA4 analysis at specified radial positions.</p> </li> <li> <p>Run 3D FEA:    <pre><code>b3p ccx blade_test.yml\n</code></pre>    Prepares and solves the 3D FEA using CalculiX for load cases (e.g., forward flap, edge).</p> </li> <li> <p>Run CCBlade analysis (optional):    <pre><code>b3p ccblade blade_test.yml\n</code></pre>    Performs aerodynamic analysis.</p> </li> </ol>"},{"location":"examples/blade_test/#generated-files","title":"Generated Files","text":"<p>The workflow generates files in <code>temp_blade_portable</code>:</p> <ul> <li> <p>Mesh Files (<code>temp_blade_portable/mesh/</code>):</p> <ul> <li>Airfoil data (e.g., <code>xs_test_blade_t_*.dat</code>).</li> <li>3D meshes (e.g., <code>test_blade.vtp</code>, <code>test_blade_shell.vtp</code>).</li> <li>Web meshes (e.g., <code>test_blade_w0.vtp</code>).</li> <li>Configuration files (e.g., <code>test_blade_variables.json</code>).</li> </ul> </li> <li> <p>Drape Files (<code>temp_blade_portable/drape/</code>):</p> <ul> <li>Material data (e.g., <code>material_map.json</code>, <code>ply_bom.csv</code>).</li> <li>Draped meshes (e.g., <code>test_blade_shell_dr.vtu</code>).</li> <li>Mass summaries (e.g., <code>test_blade_mass.csv</code>).</li> <li>2D sectional meshes (e.g., <code>msec_*.vtp</code>, <code>msec_*.xdmf</code>).</li> </ul> </li> <li> <p>FEA Files (<code>temp_blade_portable/fea/</code>):</p> <ul> <li>CalculiX inputs (e.g., <code>test_blade_ccx_mp_lc_forward_flap.inp</code>).</li> <li>Results (e.g., <code>test_blade_ccx_mp_lc_forward_flap.vtu</code>).</li> </ul> </li> <li> <p>Aerodynamic Results:</p> <ul> <li><code>ccblade_output.csv</code>, <code>ccblade_output.png</code>, <code>polars.png</code>.</li> </ul> </li> </ul>"},{"location":"examples/blade_test/#workflow-summary","title":"Workflow Summary","text":"<ol> <li>Cleaning: Clears previous output.</li> <li>Building: Creates 3D geometry and meshes from YAML inputs.</li> <li>2D Analysis: Generates and analyzes 2D sectional meshes.</li> <li>3D FEA: Solves structural analysis for specified load cases.</li> <li>Aerodynamic Analysis: Computes performance metrics with CCBlade.</li> </ol>"},{"location":"examples/blade_test/#notes","title":"Notes","text":"<ul> <li>The example generates ~200 files, including large meshes and result files.</li> <li>Typical outputs include a blade mass of ~57,321 kg and volume of ~66.38 m\u00b3.</li> <li>2D analysis covers ~13 radial positions with convergence residuals (e.g., 1.77e-05).</li> <li>3D FEA uses ~11,682 elements and solves in ~70 seconds per load case.</li> <li>Visualize results with Paraview or similar tools.</li> </ul> <p>For troubleshooting, verify file paths, YAML syntax, and dependency installations. See Usage for more details.</p>"},{"location":"examples/test_run/","title":"Running the <code>blade_test.yml</code> Test Run","text":"<p>This guide demonstrates how to execute the <code>blade_test.yml</code> example included in the B3P repository as a test run. This workflow processes a wind turbine blade model (SI122) through geometry creation, meshing, 2D and 3D structural analyses, and aerodynamic analysis, serving as a comprehensive test of B3P's functionality.</p>"},{"location":"examples/test_run/#prerequisites","title":"Prerequisites","text":"<p>Before running the test, ensure:</p> <ul> <li>B3P is installed (see Installation).</li> <li>Dependencies (CalculiX, ANBA4, Conda environment <code>anba4-env</code>) are set up.</li> <li>The <code>examples</code> folder contains <code>blade_test.yml</code> and linked files (<code>materials.yml</code>, <code>loads.yml</code>, <code>laminates.yml</code>).</li> <li>Sufficient disk space (~500 MB) for output files.</li> </ul>"},{"location":"examples/test_run/#running-the-test","title":"Running the Test","text":"<p>The <code>blade_test.yml</code> test run processes the SI122 blade model using a sequence of B3P commands. You can execute it using the <code>testrun.py</code> script or manually with CLI commands.</p>"},{"location":"examples/test_run/#option-1-using-testrunpy","title":"Option 1: Using <code>testrun.py</code>","text":"<p>The <code>testrun.py</code> script automates the workflow:</p> <pre><code>cd examples\npython testrun.py --example 1\n</code></pre> <p>This runs the full sequence of commands for the SI122 blade model.</p>"},{"location":"examples/test_run/#option-2-manual-execution","title":"Option 2: Manual Execution","text":"<p>To run the workflow manually:</p> <ol> <li> <p>Clean the workspace (optional):    <pre><code>b3p clean blade_test.yml\n</code></pre>    Removes the <code>temp_blade_portable</code> directory.</p> </li> <li> <p>Build the 3D model:    <pre><code>b3p build blade_test.yml\n</code></pre>    Constructs the blade geometry, loads airfoils (e.g., NACA 0017), and generates meshes.</p> </li> <li> <p>Drape composite plies:    <pre><code>b3p drape blade_test.yml\n</code></pre>    Applies composite plies to the blade mesh.</p> </li> <li> <p>Run 2D analysis:    <pre><code>b3p 2d blade_test.yml\n</code></pre>    Generates 2D sectional meshes and runs ANBA4 analysis at ~13 radial positions.</p> </li> <li> <p>Run 3D FEA:    <pre><code>b3p ccx blade_test.yml\n</code></pre>    Prepares and solves 3D finite element analysis using CalculiX for load cases (e.g., forward flap, edge).</p> </li> <li> <p>Run CCBlade analysis:    <pre><code>b3p ccblade blade_test.yml\n</code></pre>    Performs aerodynamic analysis.</p> </li> </ol>"},{"location":"examples/test_run/#expected-outputs","title":"Expected Outputs","text":"<p>The test run generates files in the <code>temp_blade_portable</code> directory:</p> <ul> <li>Mesh Files (<code>temp_blade_portable/mesh/</code>):</li> <li>Airfoil data (e.g., <code>xs_test_blade_t_*.dat</code>).</li> <li>3D meshes (e.g., <code>test_blade.vtp</code>, <code>test_blade_shell.vtp</code>).</li> <li>Web meshes (e.g., <code>test_blade_w0.vtp</code>).</li> <li>Configuration files (e.g., <code>test_blade_variables.json</code>).</li> <li>Drape Files (<code>temp_blade_portable/drape/</code>):</li> <li>Material data (e.g., <code>material_map.json</code>, <code>ply_bom.csv</code>).</li> <li>Draped meshes (e.g., <code>test_blade_shell_dr.vtu</code>).</li> <li>Mass summaries (e.g., <code>test_blade_mass.csv</code>, ~57,321 kg).</li> <li>2D sectional meshes (e.g., <code>msec_*.vtp</code>, <code>msec_*.xdmf</code>).</li> <li>FEA Files (<code>temp_blade_portable/fea/</code>):</li> <li>CalculiX inputs (e.g., <code>test_blade_ccx_mp_lc_forward_flap.inp</code>).</li> <li>Results (e.g., <code>test_blade_ccx_mp_lc_forward_flap.vtu</code>, ~11,682 elements, ~70 seconds per load case).</li> <li>Aerodynamic Results:</li> <li><code>ccblade_output.csv</code>, <code>ccblade_output.png</code>, <code>polars.png</code>.</li> </ul>"},{"location":"examples/test_run/#key-metrics","title":"Key Metrics","text":"<ul> <li>Blade Mass: ~57,321 kg.</li> <li>Blade Volume: ~66.38 m\u00b3.</li> <li>2D Analysis: Covers ~13 radial positions with convergence residuals (e.g., 1.77e-05).</li> <li>3D FEA: Uses ~11,682 elements, solves in ~70 seconds per load case.</li> </ul> <p>Visualize results using Paraview for <code>.vtp</code>, <code>.vtu</code>, and <code>.xdmf</code> files.</p>"},{"location":"examples/test_run/#verifying-the-test-run","title":"Verifying the Test Run","text":"<p>To confirm the test run was successful:</p> <ul> <li>Check for the presence of output files in <code>temp_blade_portable</code> (~200 files).</li> <li>Verify key metrics (e.g., blade mass, convergence residuals) match expected values.</li> <li>Inspect log outputs for errors or warnings during execution.</li> <li>Visualize meshes and results in Paraview to ensure geometric and analytical accuracy.</li> </ul>"},{"location":"examples/test_run/#troubleshooting","title":"Troubleshooting","text":"<p>If the test run fails, consider:</p> <ul> <li>File Not Found: Verify <code>blade_test.yml</code> and linked files exist in the <code>examples</code> folder.</li> <li>ANBA4 Errors: Ensure the <code>anba4-env</code> Conda environment is activated:   <pre><code>conda activate anba4-env\n</code></pre></li> <li>CalculiX Not Found: Confirm <code>ccx</code> is in your PATH:   <pre><code>which ccx\n</code></pre>   Or specify the executable path with <code>--ccxexe</code>.</li> <li>YAML Syntax Errors: Validate <code>blade_test.yml</code> using a YAML linter or <code>b3p yml_portable blade_test.yml</code>.</li> <li>Resource Issues: Ensure sufficient disk space (~500 MB) and RAM for large meshes.</li> </ul> <p>For persistent issues, check the GitHub issues page or open a new issue with:</p> <ul> <li>Command output and error messages.</li> <li>Environment details (OS, Python version, B3P version, dependencies).</li> <li>Steps to reproduce the failure.</li> </ul>"},{"location":"examples/test_run/#notes","title":"Notes","text":"<ul> <li>The test run generates ~200 files, including large meshes and result files.</li> <li>Use <code>b3p clean blade_test.yml</code> to remove temporary files after testing.</li> <li>The <code>testrun.py</code> script is recommended for consistency, as it ensures the correct sequence of commands.</li> <li>For detailed file formats and CLI options, see Usage.</li> </ul> <p>For a broader example context, refer to Blade Test Example.</p>"},{"location":"use/build/","title":"Blade modeling","text":""},{"location":"use/build/#building-a-blade-model","title":"Building a blade model","text":"<p>A b3p blade model is built using the following command: <pre><code>b3p build blade_test.yml\n</code></pre> This is subdivided into the following steps: <pre><code>usage: b3p [-h] {build,drape,ccx,2d,ccblade,clean} ...\n\nBlade Design CLI\n\npositional arguments:\n  {build,drape,ccx,2d,ccblade,clean}\n    build               Build the full blade model\n    drape               Drape plies onto mesh\n    ccx                 Run Calculix operations\n    2d                  2D mesh and ANBA4 operations\n    ccblade             Run CCBlade analysis\n    clean               Clean working directory\n\noptions:\n  -h, --help            show this help message and exit\n</code></pre></p>"},{"location":"use/build/#interpolation-of-planform-parameters","title":"Interpolation of planform parameters","text":""},{"location":"use/build/#creation-of-a-2d-blade-model","title":"Creation of a 2D blade model","text":""},{"location":"use/fea/","title":"FEA calculation","text":"<pre><code>b3p ccx blade_test.yml\n</code></pre>"},{"location":"use/fea/#load-application","title":"Load application","text":""},{"location":"use/inputfile/","title":"Input File Format","text":"<p>B3P uses YAML files to define wind turbine blade models, including geometry, materials, laminates, and loads. This guide describes the structure and key sections of a B3P input file.</p>"},{"location":"use/inputfile/#file-structure","title":"File Structure","text":"<p>A B3P input file is a YAML document with the following top-level sections:</p> <ul> <li><code>general</code>: General settings (e.g., working directory, prefix).</li> <li><code>aero</code>: Aerodynamic properties and airfoil data.</li> <li><code>mesh</code>: Blade geometry and meshing parameters.</li> <li><code>materials</code>: Material properties or path to material database.</li> <li><code>laminates</code>: Composite laminate definitions.</li> <li><code>loads</code>: Load cases for structural analysis.</li> </ul>"},{"location":"use/inputfile/#example-input-file","title":"Example Input File","text":"<p>Below is a simplified example of a B3P input file:</p> <pre><code>general:\n  prefix: my_blade\n  workdir: ./output_portable\n\naero:\n  airfoils:\n    0.18: path/to/airfoil_18.dat\n    0.21: path/to/airfoil_21.dat\n  bem:\n    rated_power: 10e6  # 10 MW\n    B: 3  # Number of blades\n    rho: 1.225  # Air density\n    max_tipspeed: 95.0\n    uinf: [3, 5, 7, 9, 10, 11, 12, 13, 16, 20]\n\nmesh:\n  radii: [0.1, 5, 10, 20, 50, 100]\n  n_web_points: 10\n  n_chordwise_points: 120\n  webs:\n    web1:\n      origin: [0, 0.1, 0]\n      z_start: 0.1\n      z_follow_blade: 50\n      z_end: 100\n      orientation: [0, 1, 0]\n  bondline:\n    material: adhesive\n    width: [[0, 0], [0.5, 0.5], [1, 0.1]]\n\nmaterials: path/to/materials.yml\n\nlaminates:\n  slabs:\n    shell:\n      material: carbon_ud\n      ply_thickness: 0.001\n      slab: [[0, 0.01], [0.5, 0.02], [1, 0.015]]\n      cover:\n        chord: [0.1, 0.9, 0]\n  datums:\n    chord:\n      xy: [[0, 0], [0.5, 0.5], [1, 1]]\n      scalex: 1.0\n      scaley: 1.0\n\nloads:\n  forward_flap:\n    z: [0, 50, 100]\n    mx: [0, 1e6, 2e6]\n    my: [0, 0, 0]\n    apply:\n      radius: [0, 100]\n</code></pre>"},{"location":"use/inputfile/#section-details","title":"Section Details","text":""},{"location":"use/inputfile/#general","title":"<code>general</code>","text":"<ul> <li><code>prefix</code>: Prefix for output files (e.g., <code>my_blade</code>).</li> <li><code>workdir</code>: Working directory for output (e.g., <code>./output_portable</code>).</li> </ul>"},{"location":"use/inputfile/#aero","title":"<code>aero</code>","text":"<ul> <li><code>airfoils</code>: Dictionary mapping thickness ratios to airfoil data files (XFOIL format).</li> <li><code>bem</code>: Blade element momentum (BEM) parameters for CCBlade:</li> <li><code>rated_power</code>: Turbine power rating (W).</li> <li><code>B</code>: Number of blades.</li> <li><code>rho</code>: Air density (kg/m\u00b3).</li> <li><code>max_tipspeed</code>: Maximum tip speed (m/s).</li> <li><code>uinf</code>: Array of wind speeds (m/s).</li> </ul>"},{"location":"use/inputfile/#mesh","title":"<code>mesh</code>","text":"<ul> <li><code>radii</code>: List of radial positions for meshing (m).</li> <li><code>n_web_points</code>: Number of points for web meshing.</li> <li><code>n_chordwise_points</code>: Number of chordwise points for shell meshing.</li> <li><code>webs</code>: Dictionary of web definitions:</li> <li><code>origin</code>: Web origin point [x, y, z].</li> <li><code>z_start</code>: Start of web along blade span (m).</li> <li><code>z_follow_blade</code>: Point where web follows blade geometry (m).</li> <li><code>z_end</code>: End of web (m).</li> <li><code>orientation</code>: Normal vector of web plane [x, y, z].</li> <li><code>bondline</code>: Bondline configuration:</li> <li><code>material</code>: Material name for bondline.</li> <li><code>width</code>: List of [radius, width] pairs for bondline width variation.</li> <li><code>coordinates</code> (optional): Additional datum points for meshing.</li> </ul>"},{"location":"use/inputfile/#materials","title":"<code>materials</code>","text":"<ul> <li>Path to a YAML file defining material properties or a dictionary of materials.</li> <li>Example material file (<code>materials.yml</code>):   <pre><code>carbon_ud:\n  name: Carbon UD\n  e11: 135e9\n  e22: 10e9\n  e33: 10e9\n  g12: 5e9\n  g13: 5e9\n  g23: 4e9\n  nu12: 0.3\n  nu13: 0.3\n  nu23: 0.4\n  rho: 1600\nadhesive:\n  name: Adhesive\n  E: 3e9\n  nu: 0.35\n  rho: 1200\n</code></pre></li> </ul>"},{"location":"use/inputfile/#laminates","title":"<code>laminates</code>","text":"<ul> <li><code>slabs</code>: Dictionary of laminate slabs:</li> <li><code>material</code>: Material name (must match <code>materials</code>).</li> <li><code>ply_thickness</code>: Thickness of each ply (m).</li> <li><code>slab</code>: List of [radius, thickness] pairs for thickness distribution.</li> <li><code>cover</code>: Chordwise coverage [start, end, increment].</li> <li><code>draping</code>: Either <code>plies</code> (individual plies) or <code>blocks</code> (core blocks).</li> <li><code>datums</code>: Coordinate systems for coverage calculations.</li> </ul>"},{"location":"use/inputfile/#loads","title":"<code>loads</code>","text":"<ul> <li>Dictionary of load cases (e.g., <code>forward_flap</code>):</li> <li><code>z</code>: Radial positions for load application (m).</li> <li><code>mx</code>, <code>my</code>: Moments about x and y axes (N\u00b7m).</li> <li><code>apply</code>: Conditions for load application (e.g., <code>radius: [min, max]</code>).</li> </ul>"},{"location":"use/inputfile/#notes","title":"Notes","text":"<ul> <li>File paths (e.g., airfoils, materials) are relative to the YAML file unless absolute.</li> <li>Use <code>b3p yml_portable blade.yml</code> to create a portable version with embedded linked files.</li> <li>Validate YAML syntax using a linter or the B3P CLI.</li> </ul> <p>For a complete example, see Blade Test Example.</p>"}]}